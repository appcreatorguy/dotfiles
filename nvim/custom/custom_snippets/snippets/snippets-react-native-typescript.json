{
  // ==========================================================================================================================
  // React Native Typescript
  "React Component With Props": {
    "prefix": "tsrnc",
    "body": [
      "import * as React from 'react';",
      "import { View, StyleSheet, Text } from 'react-native';",
      "",
      "export interface ${1:App}Props {",
      "}",
      "",
      "export default class ${1:}Component extends React.Component<${1:}Props, any> {",
      "  constructor(props: ${1:App}Props) {",
      "    super(props);",
      "  }",
      "",
      "  public render() {",
      "    return (",
      "      <View>",
      "         <Text>${1:} Component</Text>",
      "      </View>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Create a React Component use only Props"
  },
  "React Component - Full": {
    "prefix": "tsrnc",
    "body": [
      "import * as React from 'react';",
      "import { View, StyleSheet, Text } from 'react-native';",
      "",
      "export interface ${1:App}Props {",
      "}",
      "",
      "export interface ${1:App}State {",
      "}",
      "",
      "export default class ${1:}Component extends React.Component<${1:}Props, ${1:}State> {",
      "  constructor(props: ${1:App}Props) {",
      "    super(props);",
      "    this.state = {",
      "    };",
      "  }",
      "",
      "  public render() {",
      "    return (",
      "      <View>",
      "         <Text>${1:} Component</Text>",
      "      </View>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Create a stateful React Component with typescript with Props, State, and a constructor."
  },
  "React Component without import and export": {
    "prefix": "tsrnc",
    "body": [
      "export interface ${1:App}Props {",
      "}",
      "",
      "class ${1:} extends React.Component<${1:}Props, any> {",
      "  constructor(props: ${1:App}Props) {",
      "    super(props);",
      "  }",
      "",
      "  public render() {",
      "    return (",
      "      <View>",
      "         <Text>${1:}</Text>",
      "      </View>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Create a React Component use only Props without import and export."
  },
  "React PureComponent": {
    "prefix": "tsrnpc",
    "body": [
      "import * as React from 'react';",
      "import { View, StyleSheet, Text } from 'react-native';",
      "",
      "export interface ${1:App}Props {",
      "}",
      "",
      "export default class ${1:} extends React.PureComponent<${1:}Props, any> {",
      "  constructor(props: ${1:App}Props) {",
      "    super(props);",
      "  }",
      "",
      "  public render() {",
      "    return (",
      "      <View>",
      "         <Text>${1:}</Text>",
      "      </View>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Create a React PureComponent use ony Props"
  },
  "React Stateless Component": {
    "prefix": "tsrnsl",
    "body": [
      "import * as React from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "export interface ${1:App}Props {",
      "}",
      "",
      "export function ${1:} (props: ${1:}Props) {",
      "    return (",
      "      <View>",
      "         <Text>${1:}</Text>",
      "      </View>",
      "    );",
      "}",
      ""
    ],
    "description": "Create a React Stateless Component."
  },
  "React Stateless Functional Component": {
    "prefix": "tsrnsl",
    "body": [
      "import * as React from 'react';",
      "",
      "interface ${1:App}Props {$2",
      "}",
      "",
      "const $1: React.SFC<$1Props> = (props) => {",
      "  return $0;",
      "};"
    ],
    "description": "Create a React Stateless Functional Component."
  },
  "constructor": {
    "prefix": "conc",
    "body": [
      "constructor(props) {",
      "  super(props);",
      "  ${1:}",
      "}"
    ],
    "description": "Add a constructor in class."
  },
  "render": {
    "prefix": "ren",
    "body": [
      "render() {",
      "  return (",
      "    ${1:}",
      "  );",
      "}"
    ],
    "description": "When called, it should examine this.props and this.state and return a single React element."
  },
  "componentSetState": {
    "prefix": "sst",
    "body": [
      "this.setState(${1:});"
    ],
    "description": "Performs a shallow merge of nextState into current state"
  },
  "bind method": {
    "prefix": "bnd",
    "body": [
      "this.${1:} = this.${1:}.bind(this);"
    ],
    "description": "bind this in method"
  },
  "React redux container": {
    "prefix": "tsrncrx",
    "body": [
      "import * as React from 'react';",
      "import { View, StyleSheet, Text } from 'react-native';",
      "import { connect } from 'react-redux';",
      "",
      "export interface ${1:App}Props {",
      "}",
      "",
      "class ${1:} extends React.Component<${1:}Props, any> {",
      "  render() {",
      "    return (",
      "      <View>",
      "         <Text>${1:}</Text>",
      "      </View>",
      "    );",
      "  }",
      "}",
      "",
      "const mapStateToProps = state => {",
      "  return {",
      "  };",
      "}",
      "",
      "const mapDispatchToProps = dispatch => {",
      "  return {",
      "  };",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:});",
      ""
    ],
    "description": "React Redux container"
  },
  "reactNativeComponentStateLess": {
    "prefix": "rncsl",
    "body": [
      "import * as React from 'react';",
      "import { Text, View, StyleSheet } from 'react-native';",
      "",
      "interface ${1:componentName}Props {}",
      "",
      "const ${1:componentName} = (props: ${1:componentName}Props) => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text>${1:componentName}</Text>",
      "    </View>",
      "  );",
      "};",
      "",
      "export default ${1:componentName};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {}",
      "});",
      ""
    ],
    "description": "React Native stateless component"
  },
  "navigationOptions": {
    "prefix": "navOpt",
    "description": "Create a navigationOptions Method",
    "body": [
      "  public static navigationOptions = ({ navigation }: NavigationInjectedProps) => ({",
      "    title: '${1:Title Screen}',",
      "  });",
      ""
    ]
  },
  // ==========================================================================================================================
  // Style Sheet
  "StyleSheet Style": {
    "prefix": "rnss",
    "body": [
      "const styles = StyleSheet.create({",
      "\t$1",
      "});"
    ]
  },
  "justifyContent": {
    "prefix": "just",
    "body": "justifyContent: '${1:center}',",
    "description": "justifyContent"
  },
  "alignItems": {
    "prefix": "align",
    "body": "alignItems: '${1:center}',",
    "description": "alignItems"
  },
  "alignSelf": {
    "prefix": "align",
    "body": "alignSelf: '${1:center}',",
    "description": "alignSelf"
  },
  "alignContent": {
    "prefix": "align",
    "body": "alignContent: '${1}',",
    "description": "alignContent"
  },
  "aspectRatio": {
    "prefix": "as",
    "body": "aspectRatio: '${1}',",
    "description": "aspectRatio"
  },
  "borderBottomWidth": {
    "prefix": "bor",
    "body": "borderBottomWidth: ${1},",
    "description": "borderBottomWidth"
  },
  "borderLeftWidth": {
    "prefix": "bor",
    "body": "borderLeftWidth: ${1},",
    "description": "borderLeftWidth"
  },
  "borderRightWidth": {
    "prefix": "bor",
    "body": "borderRightWidth: ${1},",
    "description": "borderRightWidth"
  },
  "borderTopWidth": {
    "prefix": "bor",
    "body": "borderTopWidth: ${1},",
    "description": "borderTopWidth"
  },
  "borderWidth": {
    "prefix": "bor",
    "body": "borderWidth: ${1},",
    "description": "borderWidth"
  },
  "borderColor": {
    "prefix": "bor",
    "body": "borderColor: ${1},",
    "description": "borderColor"
  },
  "borderRadius": {
    "prefix": "bor",
    "body": "borderRadius: ${1},",
    "description": "borderRadius"
  },
  "borderLeftColor": {
    "prefix": "bor",
    "body": "borderLeftColor: ${1},",
    "description": "borderLeftColor"
  },
  "borderRightColor": {
    "prefix": "bor",
    "body": "borderRightColor: ${1},",
    "description": "borderRightColor"
  },
  "borderTopColor": {
    "prefix": "bor",
    "body": "borderTopColor: ${1},",
    "description": "borderTopColor"
  },
  "borderBottomColor": {
    "prefix": "bor",
    "body": "borderBottomColor: ${1},",
    "description": "borderBottomColor"
  },
  "borderBottomLeftRadius": {
    "prefix": "bor",
    "body": "borderBottomLeftRadius: ${1},",
    "description": "borderBottomLeftRadius"
  },
  "borderBottomRightRadius": {
    "prefix": "bor",
    "body": "borderBottomRightRadius: ${1},",
    "description": "borderBottomRightRadius"
  },
  "borderTopLeftRadius": {
    "prefix": "bor",
    "body": "borderTopLeftRadius: ${1},",
    "description": "borderTopLeftRadius"
  },
  "borderTopRightRadius": {
    "prefix": "bor",
    "body": "borderTopRightRadius: ${1},",
    "description": "borderTopRightRadius"
  },
  "backgroundColor": {
    "prefix": "bac",
    "body": "backgroundColor: ${1},",
    "description": "backgroundColor"
  },
  "display": {
    "prefix": "di",
    "body": "display: '${1:none}',",
    "description": "display"
  },
  "opacity": {
    "prefix": "op",
    "body": "opacity: ${1},",
    "description": "opacity"
  },
  "shadowColor": {
    "prefix": "sha",
    "body": "shadowColor: '${1:none}',",
    "description": "shadowColor"
  },
  "shadowOffset": {
    "prefix": "sha",
    "body": "shadowOffset: ${1},",
    "description": "shadowOffset"
  },
  "shadowOpacity": {
    "prefix": "sha",
    "body": "shadowOpacity: ${1},",
    "description": "shadowOpacity"
  },
  "shadowRadius": {
    "prefix": "sha",
    "body": "shadowRadius: ${1},",
    "description": "shadowRadius"
  },
  "elevation": {
    "prefix": "e",
    "body": "elevation: ${1},",
    "description": "elevation"
  },
  "flex": {
    "prefix": "flex",
    "body": "flex: ${1},",
    "description": "flex"
  },
  "flexBasis": {
    "prefix": "flex",
    "body": "flexBasis: '${1}',",
    "description": "flexBasis"
  },
  "flexDirection": {
    "prefix": "flex",
    "body": "flexDirection: '${1:column}',",
    "description": "flexDirection"
  },
  "flexGrow": {
    "prefix": "flex",
    "body": "flexGrow: '${1}',",
    "description": "flexGrow"
  },
  "flexShrink": {
    "prefix": "flex",
    "body": "flexShrink: '${1}',",
    "description": "flexShrink"
  },
  "flexWrap": {
    "prefix": "flex",
    "body": "flexWrap: '${1}',",
    "description": "flexWrap"
  },
  "fontSize": {
    "prefix": "fo",
    "body": "fontSize: ${1},",
    "description": "fontSize"
  },
  "fontStyle": {
    "prefix": "fo",
    "body": "fontStyle: '${1:normal}',",
    "description": "fontStyle"
  },
  "fontFamily": {
    "prefix": "fo",
    "body": "fontFamily: '${1}',",
    "description": "fontFamily"
  },
  "fontWeight": {
    "prefix": "fo",
    "body": "fontWeight: '${1:normal}',",
    "description": "fontWeight"
  },
  "height": {
    "prefix": "h",
    "body": "height: ${1},",
    "description": "height"
  },
  "left": {
    "prefix": "l",
    "body": "left: ${1},",
    "description": "left"
  },
  "margin": {
    "prefix": "mar",
    "body": "margin: '${1}',",
    "description": "margin"
  },
  "marginBottom": {
    "prefix": "mar",
    "body": "marginBottom: ${1},",
    "description": "marginBottom"
  },
  "marginHorizontal": {
    "prefix": "mar",
    "body": "marginHorizontal: '${1}',",
    "description": "marginHorizontal"
  },
  "marginLeft": {
    "prefix": "mar",
    "body": "marginLeft: ${1},",
    "description": "marginLeft"
  },
  "marginRight": {
    "prefix": "mar",
    "body": "marginRight: ${1},",
    "description": "marginRight"
  },
  "marginTop": {
    "prefix": "mar",
    "body": "marginTop: ${1},",
    "description": "marginTop"
  },
  "marginVertical": {
    "prefix": "mar",
    "body": "marginVertical: '${1}',",
    "description": "marginVertical"
  },
  "maxHeight": {
    "prefix": "max",
    "body": "maxHeight: ${1},",
    "description": "maxHeight"
  },
  "maxWidth": {
    "prefix": "max",
    "body": "maxWidth: ${1},",
    "description": "maxWidth"
  },
  "minHeight": {
    "prefix": "min",
    "body": "minHeight: ${1},",
    "description": "minHeight"
  },
  "minWidth": {
    "prefix": "min",
    "body": "minWidth: ${1},",
    "description": "minWidth"
  },
  "overflow": {
    "prefix": "over",
    "body": "overflow: '${1}',",
    "description": "overflow"
  },
  "padding": {
    "prefix": "padding",
    "body": "padding: ${1},",
    "description": "padding"
  },
  "paddingBottom": {
    "prefix": "padding",
    "body": "paddingBottom: ${1},",
    "description": "paddingBottom"
  },
  "paddingHorizontal": {
    "prefix": "padding",
    "body": "paddingHorizontal: ${1},",
    "description": "paddingHorizontal"
  },
  "paddingLeft": {
    "prefix": "padding",
    "body": "paddingLeft: ${1},",
    "description": "paddingLeft"
  },
  "paddingRight": {
    "prefix": "padding",
    "body": "paddingRight: ${1},",
    "description": "paddingRight"
  },
  "paddingTop": {
    "prefix": "padding",
    "body": "paddingTop: ${1},",
    "description": "paddingTop"
  },
  "paddingVertical": {
    "prefix": "padding",
    "body": "paddingVertical: ${1},",
    "description": "paddingVertical"
  },
  "position": {
    "prefix": "pos",
    "body": "position: ${1},",
    "description": "position"
  },
  "right": {
    "prefix": "ri",
    "body": "right: ${1},",
    "description": "right"
  },
  "top": {
    "prefix": "top",
    "body": "top: ${1},",
    "description": "top"
  },
  "width": {
    "prefix": "w",
    "body": "width: ${1},",
    "description": "width"
  },
  "zIndex": {
    "prefix": "z",
    "body": "zIndex: ${1},",
    "description": "zIndex"
  },
  "direction": {
    "prefix": "di",
    "body": "direction: ${1},",
    "description": "direction"
  },
  "barStyle": {
    "prefix": "bar",
    "body": "barStyle = '${1:light-content}'",
    "description": "barStyle"
  }
}
